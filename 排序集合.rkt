#lang racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set) true))
        ((< x (car set) false))
        (else (element-of-set? x (cdr set)))))

(define (intersection set1 set2)
  (if (or (null? set1) (null? set2))
      `()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersection (cdr set1) (cdr set2))))
              ((< x1 x2)
               (intersection (cdr set1) set2))
              ((> x1 x2)
               (intersection set1 (cdr set2)))))))

(define (adjoin-set x set)
  (if (null? set)
      (list x)
      (let ((current-element (car set))
            (remainder-element (cdr set)))
        (cond ((= x current-element)
               set)
              ((> x current-element)
               (cons current-element
                     (adjoin-set x remainder-element)))
              ((< x current-element)
               (cons x set))))))

(define (union-set set another)
  (cond ((and (null? set) (null? another)) '())
        ((null? set) another)
        ((null? another) set)
        (else
         (let ((x (car set)) (y (car another)))
           (cond ((= x y)
                  (cons x (union-set (cdr set) (cdr another))))
                 ((< x y)
                  (cons x (union-set (cdr set) another)))
                 ((> x y) 
                  (cons y (union-set set (cdr another)))))))))