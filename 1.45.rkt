#lang racket
(define (close-enough? x y)
  (< (abs (- x y)) 0.00001))
(define (fixed-point f guess)
  (let ((next (f guess)))
    (if (close-enough? guess next)
        guess
        (fixed-point f next))))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define (average x y)
  (/ (+ x y) 2))
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  ((lambda () (if (> n 1) (compose f (repeated f (- n 1))) 
                  f))))
(define (find x)
  (fixed-point (average-damp (lambda (y) (/ x y))) 1.0)
  )
(find 5)