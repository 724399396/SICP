#lang racket
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree `()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts) right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))


(define (intersection-set set another)
  (define (iter tree1 tree2)
    (if (or (null? tree1) (null? tree2))
        '()
        (cond
          ((= (entry tree1) (entry tree2))
           (make-tree (entry tree1) 
                      (iter (left-branch tree1) (left-branch tree2))
                      (iter (right-branch tree1) (right-branch tree2))))
          ((> (entry tree1) (entry tree2))
           (make-tree '() (iter tree1 (right-branch tree2)) (iter (left-branch tree1) tree2)))
          ((< (entry tree1) (entry tree2))
           (make-tree '() (iter tree1 (left-branch tree2)) (iter (right-branch tree1) tree2))))))
  (tree->list-2 (iter (list->tree set) (list->tree another))))

(intersection-set (list 1 2 3 4 5)
                                   (list 1 3 5 7 9))

;(left-branch (left-branch (list->tree (list 1 2 3 4 5))))

